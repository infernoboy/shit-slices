#!/bin/bash

# Example: slices Snapchat create jed

### VARIABLES

APP_NAME="$1"
ACTION="$2"
SLICE_NAME="$3"
NO_LAUNCH=$4

BUNDLE_ID=""
BUNDLE_PATH=""
EXECUTABLE="$APP_NAME"
DATA_BUNDLE_ID=""
GROUP_BUNDLE_ID=()

CORRECT_PATHS_ARE_SAVED=0

ORIG_SLICE_NAME="_original"
MP_ROOT="/private/var/mobile/Documents/Slices"
APP_ROOT="/private/var/containers/Bundle/Application"
APP_GROUP_DATA_ROOT="/private/var/mobile/Containers/Shared/AppGroup"
APP_DATA_ROOT="/private/var/mobile/Containers/Data/Application"
APP_EXTENSIONS_DATA_ROOT="/private/var/mobile/Containers/Data/PluginKitPlugin"

PROFILES="$MP_ROOT/profiles.plist"
APP_DATA_PLIST="/private/var/mobile/slices_app_data.plist"

declare -A APP_GROUP_DATA_UUID_MAP
declare -A APP_EXTENSIONS_DATA_UUID_MAP
APP_DATA_UUID=""

METADATA=".com.apple.mobile_container_manager.metadata.plist"

if [ "$1" == "reset" ]; then
    killall cfprefsd 2> /dev/null
    rm -rf "$MP_ROOT"
    echo "Data has been reset"
    exit 0
fi

### FUNCTIONS

function property {    
    if [ ! -f "$1" ]; then
        plutil -create "$1"
    fi

    local PLIST="$1"

    shift

    local OrigKeyPath="$1"
    IFS=":"; local KeyPath=($1); unset IFS
    local DictPath=()

    shift

    for ((i = 0; i < ${#KeyPath[@]}; ++i)); do
        DictPath+=(-key "${KeyPath[$i]}")

        local ValueCheck=$(plutil "${DictPath[@]}" "$PLIST" 2> /dev/null)

        if [[ ( -z "$ValueCheck" && "${#KeyPath[@]}" -ne "$((i + 1))" ) || "$?" -ne "0" ]]; then
            plutil "${DictPath[@]}" -dict "$PLIST" > /dev/null 2>&1
        fi
    done

    if [[ "$1" == "-arrayadd" ]]; then
        shift

        local ValueCheck=$(plutil "${DictPath[@]}" "$PLIST" 2> /dev/null)

        if [[ -z "$ValueCheck" ]]; then
            plutil "${DictPath[@]}" -array "$PLIST" > /dev/null 2>&1
        fi

        if [ "$1" == "-missing" ]; then
            shift

            if propertyStringExistInArray "$PLIST" "$OrigKeyPath" "$1"; then
                return 0
            fi
        fi

        if [[ -z $(plutil "${DictPath[@]}" -arrayadd -string "$@" "$PLIST" 2> /dev/null) ]]; then
            plutil "${DictPath[@]}" -array "$PLIST" > /dev/null 2>&1
            plutil "${DictPath[@]}" -arrayadd -string "$@" "$PLIST" > /dev/null
        fi
    elif [[ "$1" == "-arrayremove" ]]; then
        shift

        local ValueCheck=$(plutil "${DictPath[@]}" "$PLIST" 2> /dev/null)

        if [[ -z "$ValueCheck" ]]; then
            plutil "${DictPath[@]}" -array "$PLIST" > /dev/null 2>&1
        fi

        local CurrentArray=($(propertyToArray "$PLIST" "$OrigKeyPath"))

        property "$PLIST" "$OrigKeyPath" -remove

        for element in "${CurrentArray[@]}"; do
            if [ "$element" != "$1" ]; then
                property "$PLIST" "$OrigKeyPath" -arrayadd "$element"
            fi
        done
    else
        plutil "${DictPath[@]}" "$@" "$PLIST"
    fi
}

function propertyExist {
    if [ ! -f "$1" ]; then
        plutil -create "$1"
    fi

    local PLIST="$1"

    shift

    IFS=":"; local KeyPath=($1); unset IFS
    local DictPath=()

    shift

    for ((i = 0; i < ${#KeyPath[@]}; ++i)); do
        DictPath+=(-key "${KeyPath[$i]}")
    done

    if [[ -z $(plutil "${DictPath[@]}" "$PLIST" 2> /dev/null) ]]; then
        return 1
    else
        return 0
    fi
}

function propertyToArray {
    local prop=$(property "$1" "$2" 2> /dev/null)
    local arr=()
    local fixedEntry=""

    for entry in $prop
    do
        if [ "$entry" != "(" ] && [ "$entry" != ")" ]; then
            fixedEntry=$(tr -d '"' <<< "$entry")
            fixedEntry="${fixedEntry//','/''}"

            arr+=("$fixedEntry")
        fi
    done

    echo "${arr[@]}"
}

function propertyStringExistInArray {
    if propertyExist "$1" "$2"; then
        local elements=($(propertyToArray "$1" "$2"))

        for element in "${elements[@]}"; do
            if [ "$element" == "$3" ]; then
                return 0
            fi
        done

        return 1
    else
        return 1
    fi
}

function validate {
    setup

    echo "App: $APP_NAME"

    if [ "$ACTION" == "create" ]; then
        if [[ -z "$SLICE_NAME" ]]; then
            echo "Missing slice name"
            exit 7
        fi

        if [ "$SLICE_NAME" == "$ORIG_SLICE_NAME" ]; then
            echo "Cannot use $ORIG_SLICE_NAME as slice name!"

            exit 8
        fi

        echo "Creating slice: $SLICE_NAME"
    elif [ "$ACTION" == "apply" ]; then
        if [[ -z "$SLICE_NAME" ]]; then
            echo "Missing slice name"
            exit 7
        fi

        echo "Applying slice: $SLICE_NAME"
    elif [ "$ACTION" == "original" ]; then
        echo "Applying original slice..."

        $0 "$APP_NAME" apply "$ORIG_SLICE_NAME" "$SLICE_NAME"
    elif [ "$ACTION" == "clean" ]; then
        echo "Removing all slices..."
    elif [ "$ACTION" == "remove" ]; then
        if [[ -z "$SLICE_NAME" ]]; then
            echo "Missing slice name"
            exit 7
        fi

        echo "Removing slice: $SLICE_NAME"
    elif [ "$ACTION" == "empty" ]; then
        echo "Removing data for active slice..."
    elif [ "$ACTION" == "reinstall" ]; then
        reinstallApp
    elif [ "$ACTION" == "list" ]; then
        listSlices
    else
        exit 123
    fi
}

function searchForApp {
    echo "Searching for app..."

    for ROOT_FOLDER in "$APP_ROOT"/*; do
        if [ -d "$ROOT_FOLDER" ]; then
            for APP_FOLDER in "$ROOT_FOLDER"/*; do
                if [ -d "$APP_FOLDER" ]; then
                    if [[ "$APP_FOLDER" = *".app" ]]; then
                        if [ -f "$APP_FOLDER/Info.plist" ]; then
                            local CFBundleName=$(plutil -key CFBundleName "$APP_FOLDER/Info.plist" 2> /dev/null)
                           
                            if [ "$APP_NAME" == "$CFBundleName" ]; then
                                BUNDLE_ID="$(plutil -key CFBundleIdentifier "$APP_FOLDER/Info.plist")"
                                EXECUTABLE="$(plutil -key CFBundleExecutable "$APP_FOLDER/Info.plist")"
                                BUNDLE_PATH="$APP_FOLDER"

                                break
                            fi
                            
                            local CFBundleDisplayName=$(plutil -key CFBundleDisplayName "$APP_FOLDER/Info.plist" 2> /dev/null)
                           
                           if [ "$APP_NAME" == "$CFBundleDisplayName" ]; then
                                BUNDLE_ID="$(plutil -key CFBundleIdentifier "$APP_FOLDER/Info.plist")"
                                EXECUTABLE="$(plutil -key CFBundleExecutable "$APP_FOLDER/Info.plist")"
                                BUNDLE_PATH="$APP_FOLDER"

                                break
                            fi
                        fi
                    fi
                fi
            done
        fi
    done

    if [[ -z "$BUNDLE_ID" ]]; then
        echo "Could not find bundle ID for app."

        exit 
    fi

    BundleProfile="Profile:${BUNDLE_ID}"

    # get others from stored plist lookups
    if [ -f "$APP_DATA_PLIST" ]; then
        DATA_BUNDLE_ID=$(plutil -key "$APP_NAME" "$APP_DATA_PLIST" 2> /dev/null)
    fi

    # load app group IDs used by app
    local TMP_APP_ENTITLEMENTS="/private/var/tmp/$EXECUTABLE.entitlements"

    ldid -e "$BUNDLE_PATH/$EXECUTABLE" > "$TMP_APP_ENTITLEMENTS"

    local TMP_GROUPS=$(plutil -key "com.apple.security.application-groups" "$TMP_APP_ENTITLEMENTS" 2> /dev/null)

    local temp_group

    for group in $TMP_GROUPS
    do
        if [ "$group" != "(" ] && [ "$group" != ")" ]; then
            temp_group="${group//','/''}"  
            temp_group="${temp_group%\"}"
            temp_group="${temp_group#\"}"
            GROUP_BUNDLE_ID+=("${temp_group}")
        fi
            
    done

    rm "$TMP_APP_ENTITLEMENTS"
}

function setup {
    # create base
    mkdir -p "$MP_ROOT"
    chown mobile:mobile "$MP_ROOT"
}

function reinstallApp {
    ensureData
    defineApp

    backupData "$ACTIVE_SLICE"

    echo "Reinstalling app..."

    local PREV_PATH="$(pwd)"

    cd "$BUNDLE_PATH/.."
    mkdir Payload
    mv "$BUNDLE_PATH" Payload/
    zip -r /private/var/tmp/slices.ipa * > /dev/null
    cd "$PREV_PATH"
    appinst /private/var/tmp/slices.ipa
    rm /private/var/tmp/slices.ipa

    restoreData "$ACTIVE_SLICE"

    CORRECT_PATHS_ARE_SAVED=0

    echo "Updating paths in profile..."

    defineApp
    defineAppPaths

    echo "Reinstalled app."
}

function defineApp {
    if ! propertyExist "$PROFILES" "BundleID:${APP_NAME}"; then
        searchForApp
    else
        BUNDLE_ID=$(property "$PROFILES" "BundleID:${APP_NAME}")
        BundleProfile="Profile:${BUNDLE_ID}"
        BUNDLE_PATH=$(property "$PROFILES" "${BundleProfile}:BundlePath")
        EXECUTABLE=$(property "$PROFILES" "${BundleProfile}:Executable")
        ACTIVE_SLICE=$(property "$PROFILES" "ActiveSlice:${BUNDLE_ID}")

        if [ -f "$APP_DATA_PLIST" ]; then
            DATA_BUNDLE_ID=$(plutil -key "$APP_NAME" "$APP_DATA_PLIST" 2> /dev/null)
        fi

        if [ ! -d "$BUNDLE_PATH" ]; then
            searchForApp

            property "$PROFILES" "${BundleProfile}:BundlePath" -string "$BUNDLE_PATH"
        else
            CORRECT_PATHS_ARE_SAVED=1
        fi
    fi
}

function defineAppPaths {
    # Loop folders in APP_GROUP_DATA_ROOT, APP_EXTENSIONS_DATA_ROOT, and APP_DATA_ROOT 
    # then locate MCMMetadataIdentifier in 
    # the .com.apple.mobile_container_manager.metadata plist file

    if [ "$CORRECT_PATHS_ARE_SAVED" -eq 1 ]; then
        local AppGroupDataInfo=($(propertyToArray "$PROFILES" "${BundleProfile}:Groups"))
        local AppExtensionsDataInfo=($(propertyToArray "$PROFILES" "${BundleProfile}:Extensions"))

        echo "Setting up path for shared data..."

        for info in "${AppGroupDataInfo[@]}"; do
            IFS=":" read -r -a info_array <<< "$info"

            APP_GROUP_DATA_UUID_MAP[${info_array[0]}]="${info_array[1]}"

            if [ ! -d "$APP_GROUP_DATA_ROOT/${info_array[1]}" ]; then
                echo "Invalid group path saved for app, running full search..."

                CORRECT_PATHS_ARE_SAVED=0

                defineAppPaths

                return 0
            fi
        done

        echo "Setting up path for extension data..."

        for info in "${AppExtensionsDataInfo[@]}"; do
            IFS=":" read -r -a info_array <<< "$info"

            APP_EXTENSIONS_DATA_UUID_MAP[${info_array[0]}]="${info_array[1]}"

            if [ ! -d "$APP_EXTENSIONS_DATA_ROOT/${info_array[1]}" ]; then
                echo "Invalid extension path saved for app, running full search..."

                CORRECT_PATHS_ARE_SAVED=0

                defineAppPaths

                return 0
            fi
        done

        echo "Setting up path for app data..."

        APP_DATA_UUID=$(property "$PROFILES" "${BundleProfile}:Data")

        if [ ! -d "$APP_DATA_ROOT/$APP_DATA_UUID" ]; then
            echo "Invalid extension path saved for app, running full search..."

            CORRECT_PATHS_ARE_SAVED=0

            defineAppPaths

            return 0
        fi
    else
        echo "Searching for shared data..."

        property "$PROFILES" "${BundleProfile}:Groups" -remove > /dev/null

        for APP_FOLDER in "$APP_GROUP_DATA_ROOT"/*; do
            if [ -d "$APP_FOLDER" ]; then
                if [ -f "$APP_FOLDER/$METADATA" ]; then
                    local MCMMetadataIdentifier=$(plutil -key MCMMetadataIdentifier "$APP_FOLDER/$METADATA" 2> /dev/null)

                    for GROUP_ID in "${GROUP_BUNDLE_ID[@]}" #loop all group bundles
                    do
                        if [ "$GROUP_ID" == "$MCMMetadataIdentifier" ]; then
                            APP_GROUP_DATA_UUID_MAP[$MCMMetadataIdentifier]=$(basename "$APP_FOLDER")

                            property "$PROFILES" "${BundleProfile}:Groups" -arrayadd -missing "$MCMMetadataIdentifier:$(basename "$APP_FOLDER")"
                        fi
                    done
                fi
            fi
        done

        echo "Searching for extension data..."

        property "$PROFILES" "${BundleProfile}:Extensions" -remove > /dev/null

        for APP_FOLDER in "$APP_EXTENSIONS_DATA_ROOT"/*; do
            if [ -d "$APP_FOLDER" ]; then
                if [ -f "$APP_FOLDER/$METADATA" ]; then
                    local ParentBundleID=$(plutil -key MCMMetadataInfo -key "com.apple.MobileInstallation.ParentBundleID" "$APP_FOLDER/$METADATA" 2> /dev/null)
                    local MCMMetadataIdentifier=$(plutil -key MCMMetadataIdentifier "$APP_FOLDER/$METADATA" 2> /dev/null)

                    if [ ! -z "$ParentBundleID" ]; then
                        if [ "$DATA_BUNDLE_ID" == "$ParentBundleID" ] || [ "$BUNDLE_ID" == "$ParentBundleID" ]; then
                            APP_EXTENSIONS_DATA_UUID_MAP[$MCMMetadataIdentifier]=$(basename "$APP_FOLDER")

                            property "$PROFILES" "${BundleProfile}:Extensions" -arrayadd -missing "$MCMMetadataIdentifier:$(basename "$APP_FOLDER")"
                        fi
                    fi
                fi
            fi
        done

        echo "Searching for app data..."

        property "$PROFILES" "${BundleProfile}:Data" -remove > /dev/null

        for APP_FOLDER in "$APP_DATA_ROOT"/*; do
            if [ -d "$APP_FOLDER" ]; then
                if [ -f "$APP_FOLDER/$METADATA" ]; then
                    local this_bundle_id=$(plutil -key MCMMetadataIdentifier "$APP_FOLDER/$METADATA" 2> /dev/null)

                    if [ "$DATA_BUNDLE_ID" == "$this_bundle_id" ] || [ "$BUNDLE_ID" == "$this_bundle_id" ]; then
                        APP_DATA_UUID=$(basename "$APP_FOLDER")

                        property "$PROFILES" "${BundleProfile}:Data" -string "$APP_DATA_UUID"
                    fi
                fi
            fi
        done
    fi


    if [[ -z "$APP_DATA_UUID" ]]; then
        echo "Couldn't find app data!"

        exit 9
    fi
}

function ensureData {
    if ! propertyExist "$PROFILES" "BundleID:${APP_NAME}"; then
        echo "There is no saved data for $APP_NAME"
        exit 3
    fi
}

function killApp {
    killall "$EXECUTABLE" 2> /dev/null
    killall cfprefsd 2> /dev/null
}

function hasSlice {
    if propertyStringExistInArray "$PROFILES" "${BundleProfile}:Slices" "$1"; then
        return 0
    else
        return 1
    fi
}

function emptyData {
    killApp

    echo "Emptying slice: $ACTIVE_SLICE"

    local ProfilePath="$MP_ROOT/$BUNDLE_ID/$1"

    echo "- Emptying shared data..."

    for UUID in "${APP_GROUP_DATA_UUID_MAP[@]}"
    do
        removeData "$APP_GROUP_DATA_ROOT/$UUID"
    done

    echo "- Emptying extension data..."

    for UUID in "${APP_EXTENSIONS_DATA_UUID_MAP[@]}"
    do
        removeData "$APP_EXTENSIONS_DATA_ROOT/$UUID"
    done

    echo "- Emptying app data..."

    if [[ ! -z "$APP_DATA_UUID" ]]; then
        removeData "$APP_DATA_ROOT/$APP_DATA_UUID"
    fi 

    echo "- Finished emptying slice $ACTIVE_SLICE"
}

function backupData {
    killApp

    echo "Backing up slice: $1"

    local ProfilePath="$MP_ROOT/$BUNDLE_ID/$1"

    echo "- Backing up shared data..."

    for MCMMetadataIdentifier in "${!APP_GROUP_DATA_UUID_MAP[@]}"
    do
        copyData "$APP_GROUP_DATA_ROOT/${APP_GROUP_DATA_UUID_MAP[$MCMMetadataIdentifier]}" "$ProfilePath/Groups/$MCMMetadataIdentifier" "$2"
    done

    echo "- Backing up extension data..."

    for MCMMetadataIdentifier in "${!APP_EXTENSIONS_DATA_UUID_MAP[@]}"
    do
        copyData "$APP_EXTENSIONS_DATA_ROOT/${APP_EXTENSIONS_DATA_UUID_MAP[$MCMMetadataIdentifier]}" "$ProfilePath/Extensions/$MCMMetadataIdentifier" "$2"
    done

    echo "- Backing up app data..."

    if [[ ! -z "$APP_DATA_UUID" ]]; then
        copyData "$APP_DATA_ROOT/$APP_DATA_UUID" "$ProfilePath/Data" "$2"
    fi 

    echo "- Finished backing up slice $1"
}

function restoreData {
    killApp

    echo "Restoring slice: $1"

    if ! hasSlice "$1"; then
        echo "There is no slice named $1 for app."
        exit 10
    fi

    local ProfilePath="$MP_ROOT/$BUNDLE_ID/$1"

    echo "- Restoring shared data..."

    for MCMMetadataIdentifier in "${!APP_GROUP_DATA_UUID_MAP[@]}"; do
        local GroupPath="$ProfilePath/Groups/$MCMMetadataIdentifier/."

        if [ ! -d "$GroupPath" ]; then
            echo "Group data missing at path: $GroupPath"
            exit 11
        fi

        copyData "$GroupPath" "$APP_GROUP_DATA_ROOT/${APP_GROUP_DATA_UUID_MAP[$MCMMetadataIdentifier]}"
    done

    echo "- Restoring extension data..."

    for MCMMetadataIdentifier in "${!APP_EXTENSIONS_DATA_UUID_MAP[@]}"; do
        local ExtensionPath="$ProfilePath/Extensions/$MCMMetadataIdentifier/."

        if [ ! -d "$ExtensionPath" ]; then
            echo "Extension data missing at path: $ExtensionPath"
            exit 11
        fi

        copyData "$ExtensionPath" "$APP_EXTENSIONS_DATA_ROOT/${APP_EXTENSIONS_DATA_UUID_MAP[$MCMMetadataIdentifier]}"
    done

    echo "- Restoring app data..."

    if [[ ! -z "$APP_DATA_UUID" ]]; then
        local DataPath="$ProfilePath/Data/."

        if [ ! -d "$DataPath" ]; then
            echo "App data missing at path: $DataPath"
            exit 11
        fi

        copyData "$DataPath" "$APP_DATA_ROOT/$APP_DATA_UUID"
    fi

    echo "- Finished restoring slice $1"
}

function copyData {
    rm -rf "${2:?}"
    mkdir -p "${2:?}/"{tmp,SystemData,Documents,Library/Preferences}

    if [[ "$3" != "1" ]]; then
        cp -a "${1:?}"/. "${2:?}"
        rm -rf "${2:?}/Library/Caches"
    else
        cp "${1:?}/$METADATA" "${2:?}"
    fi

    chown -R mobile:mobile "${2:?}"
}

function removeData {
    local TMPFILE=$(mktemp)

    cp "${1:?}/$METADATA" "$TMPFILE"

    rm -rf "${1:?}"
    mkdir -p "${1:?}/"{tmp,SystemData,Documents,Library/Preferences}
    mv "$TMPFILE" "${1:?}/$METADATA"
    chown -R mobile:mobile "${1:?}"
}

function fixPermissions {
    chown mobile:mobile "$PROFILES"
    chown -R mobile:mobile "$MP_ROOT/$BUNDLE_ID";
}

function listSlices {
    defineApp

    local AppSlices=($(propertyToArray "$PROFILES" "${BundleProfile}:Slices"))

    ACTIVE_SLICE=$(property "$PROFILES" "ActiveSlice:${BUNDLE_ID}")

    echo "Slices:"

    for sliceName in "${AppSlices[@]}"; do
        echo -n "- $sliceName"

        if [[ "$sliceName" == "$ACTIVE_SLICE" ]]; then
            echo " (active)"
        else
            echo
        fi
    done
}

validate 

if [ "$ACTION" == "create" ]; then
    defineApp

    if hasSlice "$SLICE_NAME"; then
        echo "Slice already exist: $SLICE_NAME"

        exit 12
    fi

    defineAppPaths 

    property "$PROFILES" "BundleID:${APP_NAME}" -string "$BUNDLE_ID"
    property "$PROFILES" "${BundleProfile}:AppName" -string "$APP_NAME"
    property "$PROFILES" "${BundleProfile}:BundlePath" -string "$BUNDLE_PATH"
    property "$PROFILES" "${BundleProfile}:Executable" -string "$EXECUTABLE"

    if ! hasSlice "$ORIG_SLICE_NAME"; then
        echo "Creating original slice for $APP_NAME"

        property "$PROFILES" "${BundleProfile}:Slices" -arrayadd -missing "$ORIG_SLICE_NAME"

        backupData "$ORIG_SLICE_NAME"
    else
        backupData "$(property "$PROFILES" "ActiveSlice:${BUNDLE_ID}")"
    fi

    property "$PROFILES" "${BundleProfile}:Slices" -arrayadd -missing "$SLICE_NAME"
    property "$PROFILES" "ActiveSlice:${BUNDLE_ID}" -string "$SLICE_NAME"

    backupData "$SLICE_NAME" 1

    fixPermissions

    echo "Slice $SLICE_NAME is now active for app."

    exit 0
fi

if [ "$ACTION" == "apply" ]; then
    ensureData
    defineApp

    if [ "$ACTIVE_SLICE" == "$SLICE_NAME" ]; then
        echo "Slice $SLICE_NAME is already applied"
        
        if [[ -z "$NO_LAUNCH" ]]; then
            activator send "$BUNDLE_ID"
        fi
        
        exit 0
    fi

    if ! hasSlice "$SLICE_NAME"; then
        echo "There is no slice named $SLICE_NAME for app."

        exit 2
    fi
    
    defineAppPaths
    
    backupData "$ACTIVE_SLICE"
    restoreData "$SLICE_NAME"

    property "$PROFILES" "ActiveSlice:${BUNDLE_ID}" -string "$SLICE_NAME"

    if [[ -z "$NO_LAUNCH" ]]; then
        activator send "$BUNDLE_ID"
    fi

    fixPermissions

    echo "Slice $SLICE_NAME is now active for app."

    exit 0
fi

if [ "$ACTION" == "clean" ]; then
    ensureData

    BUNDLE_ID=$(property "$PROFILES" "BundleID:${APP_NAME}")

    property "$PROFILES" "ActiveSlice:${BUNDLE_ID}" -remove
    property "$PROFILES" "BundleID:${APP_NAME}" -remove
    property "$PROFILES" "Profile:${BUNDLE_ID}" -remove

    rm -rf "$MP_ROOT/$BUNDLE_ID"

    echo "Removed all slices for $APP_NAME"

    exit 0
fi

if [ "$ACTION" == "remove" ]; then
    ensureData

    BUNDLE_ID=$(property "$PROFILES" "BundleID:${APP_NAME}")
    ACTIVE_SLICE=$(property "$PROFILES" "ActiveSlice:${BUNDLE_ID}")

    if [ "$ACTIVE_SLICE" == "$SLICE_NAME" ]; then
        echo "Slice $SLICE_NAME is currently active and cannot be removed. To remove this one, apply another slice first, or use 'original' action if no other slice exist."
        
        exit 4
    fi

    if [ "$SLICE_NAME" == "$ORIG_SLICE_NAME" ]; then
        echo "Original slice cannot be removed. Use 'clean' action to remove all slices for app."

        exit 5
    fi

    if ! hasSlice "$SLICE_NAME"; then
        echo "There is no slice named $SLICE_NAME for app."

        exit 6
    fi

    property "$PROFILES" "Profile:${BUNDLE_ID}:Slices" -arrayremove "$SLICE_NAME"

    rm -rf "$MP_ROOT/$BUNDLE_ID/$SLICE_NAME"

    echo "Removed slice $SLICE_NAME for $APP_NAME"

    exit 0
fi

if [ "$ACTION" == "empty" ]; then
    ensureData
    defineApp

    if [ "$SLICE_NAME" == "$ORIG_SLICE_NAME" ]; then
        echo "Original slice cannot be emptied."

        exit 5
    fi
    
    defineAppPaths
    emptyData
    fixPermissions

    echo "Emptied slice $ACTIVE_SLICE for $APP_NAME"

    exit 0
fi
