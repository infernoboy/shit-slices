#!/bin/bash

# Example: slices Snapchat create jed

### VARIABLES

APP_NAME="$1"
ACTION="$2"
SLICE_NAME="$3"
NO_LAUNCH=$4

BUNDLE_ID=""
BUNDLE_PATH=""
EXECUTABLE="$APP_NAME"
DATA_BUNDLE_ID=""
GROUP_BUNDLE_ID=()
PROFILES=()

ORIG_SLICE_NAME="_original"
MP_ROOT="/private/var/mobile/Documents/Slices"
APP_ROOT="/private/var/containers/Bundle/Application"
APP_GROUP_DATA_ROOT="/private/var/mobile/Containers/Shared/AppGroup"
APP_DATA_ROOT="/private/var/mobile/Containers/Data/Application"
APP_EXTENSIONS_DATA_ROOT="/private/var/mobile/Containers/Data/PluginKitPlugin"

PLIST="$MP_ROOT/profiles.plist"
APP_DATA_PLIST="/private/var/mobile/slices_app_data.plist"

APP_GROUP_DATA_GUID=()
APP_EXTENSIONS_DATA_GUID=()
APP_DATA_GUID=""
APP_INDEX=""

if [ "$1" == "reset" ]; then
    killall cfprefsd 2> /dev/null
    rm -rf $MP_ROOT
    echo "Data has been reset"
    exit 0
fi


### FUNCTIONS

function property {    
    if [ ! -f "$PLIST" ]; then
        plutil -create "$PLIST"
    fi

    local Args="$@"
    local OrigKeyPath="$1"
    IFS=":"; local KeyPath=($1); unset IFS
    local DictPath=()

    shift

    for ((i = 0; i < ${#KeyPath[@]}; ++i)); do
        DictPath+=(-key "${KeyPath[$i]}")

        local ValueCheck=`plutil "${DictPath[@]}" "$PLIST" 2> /dev/null`

        if [[ ( -z "$ValueCheck" && "${#KeyPath[@]}" -ne "$((i + 1))" ) || "$?" -ne "0" ]]; then
            plutil "${DictPath[@]}" -dict "$PLIST" > /dev/null 2>&1
        fi
    done

    if [[ "$1" == "-arrayadd" ]]; then
        shift

        local ValueCheck=`plutil "${DictPath[@]}" "$PLIST" 2> /dev/null`

        if [[ -z "$ValueCheck" ]]; then
            plutil "${DictPath[@]}" -array "$PLIST" > /dev/null 2>&1
        fi

        if [ "$1" == "-missing" ]; then
            shift

            if propertyStringExistInArray "$OrigKeyPath" "$1"; then
                return 0
            fi
        fi

        if [[ -z `plutil "${DictPath[@]}" -arrayadd -string "$@" "$PLIST" 2> /dev/null` ]]; then
            plutil "${DictPath[@]}" -array "$PLIST" > /dev/null 2>&1
            plutil "${DictPath[@]}" -arrayadd -string "$@" "$PLIST" > /dev/null
        fi
    else
        plutil "${DictPath[@]}" "$@" "$PLIST"
    fi
}

function propertyExist {
    if [ ! -f "$PLIST" ]; then
        plutil -create "$PLIST"
    fi

    IFS=":"; local KeyPath=($1); unset IFS
    local DictPath=()

    shift

    for ((i = 0; i < ${#KeyPath[@]}; ++i)); do
        DictPath+=(-key "${KeyPath[$i]}")
    done

    if [[ -z `plutil "${DictPath[@]}" "$PLIST" 2> /dev/null` ]]; then
        return 1
    else
        return 0
    fi
}

function propertyToArray {
    local prop=$(property "$1" 2> /dev/null)
    local arr=()
    local fixedEntry=""

    for entry in $prop
    do
        if [ "$entry" != "(" ] && [ "$entry" != ")" ]; then
            fixedEntry=`tr -d '"' <<< "$entry"`
            fixedEntry="${fixedEntry//','/''}"

            arr+=("$fixedEntry")
        fi
    done

    echo "${arr[@]}"
}

function propertyStringExistInArray {
    if propertyExist "$1"; then
        local elements=($(propertyToArray "$1"))

        for element in "${elements[@]}"; do
            if [ "$element" == "$2" ]; then
                return 0
            fi
        done

        return 1
    else
        return 1
    fi
}

function validate {
    echo "App: $APP_NAME"

    if [ "$ACTION" == "create" ]; then
        if [[ -z "$SLICE_NAME" ]]; then
            echo "Missing slice name"
            exit 1
        fi

        echo "Creating slice: $SLICE_NAME"
    elif [ "$ACTION" == "apply" ]; then
        if [[ -z "$SLICE_NAME" ]]; then
            echo "Missing slice name"
            exit 1
        fi

        echo "Applying slice: $SLICE_NAME"
    elif [ "$ACTION" == "clean" ]; then
        echo "Removing all slices..."
    else
        echo "Unknown action"
        exit 1
    fi

    if [ "$SLICE_NAME" == "$ORIG_SLICE_NAME" ]; then
        echo "Cannot use $ORIG_SLICE_NAME as slice name!"

        exit 1
    fi
}

function defineBundleIds {
    # loop apps to pull bundle id
    for ROOT_FOLDER in $APP_ROOT/*; do
        if [ -d ${ROOT_FOLDER} ]; then
            for APP_FOLDER in $ROOT_FOLDER/*; do
                if [ -d "$APP_FOLDER" ]; then
                    if [[ "$APP_FOLDER" = *".app" ]]; then
                        if [ -f "$APP_FOLDER/Info.plist" ]; then
                            local this_name=$(plutil -key CFBundleName "$APP_FOLDER/Info.plist" 2> /dev/null)
                            if [ "$APP_NAME" == "$this_name" ]; then
                                BUNDLE_ID="$(plutil -key CFBundleIdentifier "$APP_FOLDER/Info.plist")"
                                BundleProfile="Profile:${BUNDLE_ID}"
                                EXECUTABLE="$(plutil -key CFBundleExecutable "$APP_FOLDER/Info.plist")"
                                BUNDLE_PATH="$APP_FOLDER"
                            fi
                            
                            local this_name=$(plutil -key CFBundleDisplayName "$APP_FOLDER/Info.plist" 2> /dev/null)
                            if [ "$APP_NAME" == "$this_name" ]; then
                                BUNDLE_ID="$(plutil -key CFBundleIdentifier "$APP_FOLDER/Info.plist")"
                                BundleProfile="Profile:${BUNDLE_ID}"
                                EXECUTABLE="$(plutil -key CFBundleExecutable "$APP_FOLDER/Info.plist")"
                                BUNDLE_PATH="$APP_FOLDER"
                            fi
                        fi
                    fi
                fi
            done
        fi
    done

    if [[ -z "$BUNDLE_ID" ]]; then
        echo "Could not find bundle id for $APP_NAME"
        exit 1;
    fi

    # get others from stored plist lookups
    if [ -f "$APP_DATA_PLIST" ]; then
        DATA_BUNDLE_ID=$(plutil -key "$APP_NAME" "$APP_DATA_PLIST" 2> /dev/null)
    fi

    # load app group IDs used by app
    local TMP_APP_ENTITLEMENTS="/private/var/tmp/$EXECUTABLE.entitlements"

    ldid -e "$BUNDLE_PATH/$EXECUTABLE" > "$TMP_APP_ENTITLEMENTS"

    local TMP_GROUPS=$(plutil -key "com.apple.security.application-groups" "$TMP_APP_ENTITLEMENTS" 2> /dev/null)

    local temp_group

    for group in $TMP_GROUPS
    do
        if [ "$group" != "(" ] && [ "$group" != ")" ]; then
            temp_group="${group//','/''}"  
            temp_group="${temp_group%\"}"
            temp_group="${temp_group#\"}"
            GROUP_BUNDLE_ID+=("${temp_group}")
        fi
            
    done

    rm "$TMP_APP_ENTITLEMENTS"
}

function setup {
    # create base
    mkdir -p "$MP_ROOT"
} 

function defineAppPaths {
    # Loop folders in APP_GROUP_DATA_ROOT, APP_EXTENSIONS_DATA_ROOT, and APP_DATA_ROOT 
    # then locate MCMMetadataIdentifier in 
    # the .com.apple.mobile_container_manager.metadata plist file
    
    local metadata=".com.apple.mobile_container_manager.metadata.plist"

    for APP_FOLDER in $APP_GROUP_DATA_ROOT/*; do
        if [ -d ${APP_FOLDER} ]; then
            if [ -f "$APP_FOLDER/$metadata" ]; then
                local this_bundle_id=$(plutil -key MCMMetadataIdentifier "$APP_FOLDER/$metadata" 2> /dev/null)
                for id in "${GROUP_BUNDLE_ID[@]}" #loop all group bundles
                do
                    if [ "$id" == "$this_bundle_id" ] || [ "$BUNDLE_ID" == "$this_bundle_id" ] || [[ "$this_bundle_id" == *"$BUNDLE_ID" ]]; then
                        local fld=$(basename "$APP_FOLDER")
                        APP_GROUP_DATA_GUID+=("${fld}")
                    fi
                done
            fi
        fi
    done

    for APP_FOLDER in $APP_EXTENSIONS_DATA_ROOT/*; do
        if [ -d ${APP_FOLDER} ]; then
            if [ -f "$APP_FOLDER/$metadata" ]; then
                local this_bundle_id=$(plutil -key MCMMetadataInfo -key "com.apple.MobileInstallation.ParentBundleID" "$APP_FOLDER/$metadata" 2> /dev/null)
                if [ "$DATA_BUNDLE_ID" == "$this_bundle_id" ] || [ "$BUNDLE_ID" == "$this_bundle_id" ]; then
                    APP_EXTENSIONS_DATA_GUID+=($(basename "$APP_FOLDER"))
                fi
            fi
        fi
    done

    for APP_FOLDER in $APP_DATA_ROOT/*; do
        if [ -d ${APP_FOLDER} ]; then
            if [ -f "$APP_FOLDER/$metadata" ]; then
                local this_bundle_id=$(plutil -key MCMMetadataIdentifier "$APP_FOLDER/$metadata" 2> /dev/null)
                if [ "$DATA_BUNDLE_ID" == "$this_bundle_id" ] || [ "$BUNDLE_ID" == "$this_bundle_id" ]; then
                    APP_DATA_GUID=$(basename "$APP_FOLDER")
                fi
            fi
        fi
    done

    local group_items=${#APP_GROUP_DATA_GUID[@]}

    if [ $group_items -gt 0 ] && [[ -z "$APP_DATA_GUID" ]]; then
        echo "Couldn't find app data!"

        exit 1
    fi
}

function debugVars {
    echo "APP_NAME: $APP_NAME"
    echo "EXECUTABLE: $EXECUTABLE"
    echo "ACTION: $ACTION"
    echo "SLICE_NAME: $SLICE_NAME"
    echo "BUNDLE_ID: $BUNDLE_ID"
    echo "BUNDLE_PATH: $BUNDLE_PATH"
    echo "DATA_BUNDLE_ID: $DATA_BUNDLE_ID"
    echo "GROUP_BUNDLE_ID: ${GROUP_BUNDLE_ID[@]}"

    echo "PLIST: $PLIST"
    echo "APP_DATA_PLIST: $APP_DATA_PLIST"

    echo "APP_GROUP_DATA_GUID: $APP_GROUP_DATA_GUID"
    echo "APP_DATA_GUID: $APP_DATA_GUID"
    echo "APP_EXTENSIONS_DATA_GUID: ${APP_EXTENSIONS_DATA_GUID[@]}"
}

function hasSlice {
    if propertyStringExistInArray "${BundleProfile}:Slices" "$1"; then
        return 0
    else
        return 1
    fi
}

function backupData {
    killall cfprefsd 2> /dev/null

    echo "Backing up slice: $1"

    local ProfilePath="$MP_ROOT/$BUNDLE_ID/slice.$1"

    echo "- Backing up shared data..."

    for GUID in "${APP_GROUP_DATA_GUID[@]}"
    do
        local GroupPath="$ProfilePath/Groups/$GUID"

        rm -rf ${GroupPath}
        mkdir -p ${GroupPath}
        cp -a ${APP_GROUP_DATA_ROOT}/${GUID}/. ${GroupPath}        
        # echo "rm -rf ${GroupPath}"
        # echo "mkdir -p ${GroupPath}"
        #echo "cp -a ${APP_GROUP_DATA_ROOT}/${GUID}/. ${GroupPath}"
    done

    echo "- Backing up extension data..."

    for GUID in "${APP_EXTENSIONS_DATA_GUID[@]}"
    do
        local ExtensionPath="$ProfilePath/Extensions/$GUID"

        rm -rf ${ExtensionPath}
        mkdir -p ${ExtensionPath}
        cp -a ${APP_EXTENSIONS_DATA_ROOT}/${GUID}/. ${ExtensionPath}        
        # echo "rm -rf ${ExtensionPath}"
        # echo "mkdir -p ${ExtensionPath}"
        #echo "cp -a ${APP_EXTENSIONS_DATA_ROOT}/${GUID}/. ${ExtensionPath}"
    done

    echo "- Backing up app data..."

    local DataPath="$ProfilePath/Data/$APP_DATA_GUID"

    if [[ ! -z "$APP_DATA_GUID" ]]; then
        rm -rf ${DataPath}
        mkdir -p ${DataPath}
        cp -a ${APP_DATA_ROOT}/${APP_DATA_GUID}/. ${DataPath}      
        # echo "rm -rf ${DataPath}"
        # echo "mkdir -p ${DataPath}"
        # echo "cp -a ${APP_DATA_ROOT}/${APP_DATA_GUID}/. ${DataPath}"
    fi

    echo "- Finished backing up slice $1"
}

function restoreData {
    killall cfprefsd 2> /dev/null

    echo "Restoring slice: $1"

    if ! hasSlice "$1"; then
        echo "There is no slice named $1 for $APP_NAME"
        exit 1
    fi

    local ProfilePath="$MP_ROOT/$BUNDLE_ID/slice.$1"

    echo "- Restoring shared data..."

    APP_GROUP_DATA_GUID=($(propertyToArray "${BundleProfile}:Groups"))

    for GUID in "${APP_GROUP_DATA_GUID[@]}"; do
        local GroupPath="$ProfilePath/Groups/$GUID"

        if [ ! -d "$GroupPath" ]; then
            echo "Group data missing at path: $this_group_path"
            exit 1
        fi

        rm -rf ${APP_GROUP_DATA_ROOT}/${GUID}
        mkdir -p ${APP_GROUP_DATA_ROOT}/${GUID}
        cp -a ${this_group_path}/. ${APP_GROUP_DATA_ROOT}/${GUID} 
        #echo "rm -rf ${APP_GROUP_DATA_ROOT}/${GUID}"
        #echo "mkdir -p ${APP_GROUP_DATA_ROOT}/${GUID}"
        #echo "cp -a ${this_group_path}/. ${APP_GROUP_DATA_ROOT}/${GUID}"

    done

    echo "- Restoring extension data..."

    APP_EXTENSIONS_DATA_GUID=($(propertyToArray "${BundleProfile}:Extensions"))

    for GUID in "${APP_EXTENSIONS_DATA_GUID[@]}"; do
        local ExtensionPath="$ProfilePath/Extensions/$GUID"

        if [ ! -d "$ExtensionPath" ]; then
            echo "Extension data missing at path: $ExtensionPath"
            exit 1
        fi

        rm -rf ${APP_EXTENSIONS_DATA_ROOT}/${GUID}
        mkdir -p ${APP_EXTENSIONS_DATA_ROOT}/${GUID}
        cp -a ${ExtensionPath}/. ${APP_EXTENSIONS_DATA_ROOT}/${GUID} 
        #echo "rm -rf ${APP_EXTENSIONS_DATA_ROOT}/${GUID}"
        #echo "mkdir -p ${APP_EXTENSIONS_DATA_ROOT}/${GUID}"
        #echo "cp -a ${ExtensionPath}/. ${APP_EXTENSIONS_DATA_ROOT}/${GUID}"

    done

    echo "- Restoring app data..."

    APP_DATA_GUID=$(property "${BundleProfile}:Data")

    if [[ ! -z "$APP_DATA_GUID" ]]; then
        local DataPath="$ProfilePath/Data/$APP_DATA_GUID"

        if [ ! -d "$DataPath" ]; then
            echo "App data missing at path: $DataPath"
            exit 1
        fi

        rm -rf ${APP_DATA_ROOT}/${APP_DATA_GUID}
        mkdir -p ${APP_DATA_ROOT}/${APP_DATA_GUID}
        cp -a ${DataPath}/. ${APP_DATA_ROOT}/${APP_DATA_GUID} 
        #echo "rm -rf ${APP_DATA_ROOT}/${APP_DATA_GUID}"
        #echo "mkdir -p ${APP_DATA_ROOT}/${APP_DATA_GUID}"
        #echo "cp -a ${DataPath}/. ${APP_DATA_ROOT}/${APP_DATA_GUID}"

    fi

    echo "- Finished restoring slice $1"
}

validate
setup 

if [ "$ACTION" == "create" ]; then
    defineBundleIds
    defineAppPaths 

    killall "$EXECUTABLE" 2> /dev/null

    property "BundleID:${APP_NAME}" -string "$BUNDLE_ID"

    property "${BundleProfile}:AppName" -string "$APP_NAME"
    property "${BundleProfile}:BundlePath" -string "$BUNDLE_PATH"
    property "${BundleProfile}:Executable" -string "$EXECUTABLE"
    
    group_items=${#APP_GROUP_DATA_GUID[@]}

    if [[ ! -z "$group_items" ]]; then
        for GUID in "${APP_GROUP_DATA_GUID[@]}"; do
            property "${BundleProfile}:Groups" -arrayadd -missing "$GUID"
        done            
    fi

    extension_items=${#APP_EXTENSIONS_DATA_GUID[@]}

    if [[ ! -z "$extension_items" ]]; then
        for GUID in "${APP_EXTENSIONS_DATA_GUID[@]}"; do
            property "${BundleProfile}:Extensions" -arrayadd -missing "$GUID"
        done
    fi

    if [[ ! -z "$APP_DATA_GUID" ]]; then
        property "${BundleProfile}:Data" -string "$APP_DATA_GUID"
    fi

    if ! hasSlice "$ORIG_SLICE_NAME"; then
        echo "Creating original slice for $APP_NAME"

        property "${BundleProfile}:Slices" -arrayadd -missing "$ORIG_SLICE_NAME"

        backupData "$ORIG_SLICE_NAME"
    fi

    property "ActiveSlice:${BUNDLE_ID}" -string "$SLICE_NAME"

    if hasSlice "$SLICE_NAME"; then
        echo "Slice already exist: $SLICE_NAME"

        exit 1
    else
        property "${BundleProfile}:Slices" -arrayadd -missing "$SLICE_NAME"

        backupData "$SLICE_NAME"
    fi

    exit 0
fi

if [ "$ACTION" == "apply" ]; then
    if ! propertyExist "BundleID:${APP_NAME}"; then
        echo "There is no saved data for $APP_NAME"
        exit 1
    fi

    BUNDLE_ID=$(property "BundleID:${APP_NAME}")
    BundleProfile="Profile:${BUNDLE_ID}"
    ACTIVE_SLICE=$(property "ActiveSlice:${BUNDLE_ID}")

    if [ "$ACTIVE_SLICE" == "$SLICE_NAME" ]; then
        echo "Profile $SLICE_NAME is already applied"
        
        if [[ -z "$NO_LAUNCH" ]]; then
            activator send $BUNDLE_ID
        fi
        
        exit 1
    fi

    EXECUTABLE=$(property "${BundleProfile}:Executable")
    
    APP_DATA_GUID=$(property "${BundleProfile}:Data")
    APP_GROUP_DATA_GUID=($(propertyToArray "${BundleProfile}:Groups"))
    APP_EXTENSIONS_DATA_GUID=($(propertyToArray "${BundleProfile}:Extensions"))

    killall "$EXECUTABLE" 2> /dev/null
    
    backupData "$ACTIVE_SLICE"
    restoreData "$SLICE_NAME"

    property "ActiveSlice:${BUNDLE_ID}" -string "$SLICE_NAME"

    if [[ -z "$NO_LAUNCH" ]]; then
        activator send $BUNDLE_ID
    fi

    exit 0
fi

if [ "$ACTION" == "clean" ]; then
    if ! propertyExist "BundleID:${APP_NAME}"; then
        echo "There is no saved data for $APP_NAME"
        exit 1
    fi

    BUNDLE_ID=$(property "BundleID:${APP_NAME}")

    property "ActiveSlice:${BUNDLE_ID}" -remove
    property "BundleID:${APP_NAME}" -remove
    property "Profile:${BUNDLE_ID}" -remove

    rm -rf "$MP_ROOT/$BUNDLE_ID"

    echo "Removed all slices for $APP_NAME"

    exit 0
fi
